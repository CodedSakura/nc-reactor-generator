package old;

import java.awt.Color;
import java.util.ArrayList;
import java.util.Random;
import java.util.logging.Level;
import java.util.logging.Logger;
import simplelibrary.numbers.HugeLong;

/**
 *
 * @author James
 */
public class Main extends javax.swing.JFrame {
    public static Reactor best = null;
    public static Reactor best2 = null;
    public static long processed = 0;
    public static long lastTime = 0;
    public static long startTime = 0;
    private long MERGE_THRESHOLD = 60_000_000_000l;
    public static int id, id2;
    public static boolean stopSecondaries = false;
    public static boolean update1 = false;
    private Reactor imported = null;
    /**
     * Creates new form Main
     */
    public Main() {
        initComponents();
        boxPriority1.setSelectedIndex(0);
        boxPriority2.setSelectedIndex(1);
        boxPriority3.setSelectedIndex(2);
        boxFuel.setSelectedIndex(7);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonStart1 = new javax.swing.JButton();
        toggleCells = new javax.swing.JCheckBox();
        toggleModerators = new javax.swing.JCheckBox();
        toggleWater = new javax.swing.JCheckBox();
        labelCoolers = new javax.swing.JLabel();
        toggleRedstone = new javax.swing.JCheckBox();
        toggleQuartz = new javax.swing.JCheckBox();
        toggleGold = new javax.swing.JCheckBox();
        toggleGlowstone = new javax.swing.JCheckBox();
        toggleLapis = new javax.swing.JCheckBox();
        toggleDiamond = new javax.swing.JCheckBox();
        toggleHelium = new javax.swing.JCheckBox();
        toggleEnderium = new javax.swing.JCheckBox();
        toggleCryotheum = new javax.swing.JCheckBox();
        toggleIron = new javax.swing.JCheckBox();
        toggleEmerald = new javax.swing.JCheckBox();
        toggleCopper = new javax.swing.JCheckBox();
        toggleTin = new javax.swing.JCheckBox();
        toggleMagnesium = new javax.swing.JCheckBox();
        sizeX = new javax.swing.JSpinner();
        sizeY = new javax.swing.JSpinner();
        sizeZ = new javax.swing.JSpinner();
        jScrollPane1 = new javax.swing.JScrollPane();
        textAreaOutput = new javax.swing.JTextArea();
        toggleAir = new javax.swing.JCheckBox();
        boxFuel = new javax.swing.JComboBox<>();
        spinnerThreads = new javax.swing.JSpinner();
        labelThreads = new javax.swing.JLabel();
        buttonStart2 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        textAreaOutput2 = new javax.swing.JTextArea();
        labelStatus = new javax.swing.JLabel();
        spinnerMergeTime = new javax.swing.JSpinner();
        labelPriority1 = new javax.swing.JLabel();
        boxPriority1 = new javax.swing.JComboBox<>();
        labelPriority2 = new javax.swing.JLabel();
        boxPriority2 = new javax.swing.JComboBox<>();
        boxPriority3 = new javax.swing.JComboBox<>();
        labelPriority3 = new javax.swing.JLabel();
        labelMergeTime = new javax.swing.JLabel();
        spinnerChangeChance = new javax.swing.JSpinner();
        labelChangeChance = new javax.swing.JLabel();
        labelSize = new javax.swing.JLabel();
        checkboxDrawReactors = new javax.swing.JCheckBox();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        buttonImport = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();

        buttonStart1.setText("Start One");
        buttonStart1.setToolTipText("<html>Starts or stops generating reactors<br>\nThis will only create one instance. This will go much faster, but may get stuck on a bad design\nThis mode is for creating a quick, fairly good reactor.\n</html>");
        buttonStart1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonStart1ActionPerformed(evt);
            }
        });

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("OLD Pre-overhaul reactor generator");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        toggleCells.setSelected(true);
        toggleCells.setText("Cells (C)");
        toggleCells.setToolTipText("<html>Toggles fuel cells in generated reactors<br>Cannot be disabled, as reactors without cells generate no power</html>");
        toggleCells.setEnabled(false);

        toggleModerators.setSelected(true);
        toggleModerators.setText("Moderators (M)");
        toggleModerators.setToolTipText("Toggles moderators (such as graphite or beryllium) in generated reactors");

        toggleWater.setSelected(true);
        toggleWater.setText("Water (W)");
        toggleWater.setToolTipText("Toggles water coolers in generated reactors");

        labelCoolers.setText("Coolers");

        toggleRedstone.setSelected(true);
        toggleRedstone.setText("Redstone (R)");
        toggleRedstone.setToolTipText("Toggles redstone coolers in generated reactors");

        toggleQuartz.setSelected(true);
        toggleQuartz.setText("Quartz (Q)");
        toggleQuartz.setToolTipText("Toggles quartz coolers in generated reactors");

        toggleGold.setSelected(true);
        toggleGold.setText("Gold (O)");
        toggleGold.setToolTipText("Toggles gold coolers in generated reactors");

        toggleGlowstone.setSelected(true);
        toggleGlowstone.setText("Glowstone (G)");
        toggleGlowstone.setToolTipText("Toggles glowstone coolers in generated reactors");

        toggleLapis.setSelected(true);
        toggleLapis.setText("Lapis (L)");
        toggleLapis.setToolTipText("Toggles lapis coolers in generated reactors");

        toggleDiamond.setSelected(true);
        toggleDiamond.setText("Diamond (D)");
        toggleDiamond.setToolTipText("Toggles diamond coolers in generated reactors");

        toggleHelium.setSelected(true);
        toggleHelium.setText("Liquid Helium (H)");
        toggleHelium.setToolTipText("Toggles liquid helium coolers in generated reactors");

        toggleEnderium.setSelected(true);
        toggleEnderium.setText("Enderium (E)");
        toggleEnderium.setToolTipText("Toggles enderium coolers in generated reactors");

        toggleCryotheum.setSelected(true);
        toggleCryotheum.setText("Cryotheum (Y)");
        toggleCryotheum.setToolTipText("Toggles cryotheum coolers in generated reactors");

        toggleIron.setSelected(true);
        toggleIron.setText("Iron (I)");
        toggleIron.setToolTipText("Toggles iron coolers in generated reactors");

        toggleEmerald.setSelected(true);
        toggleEmerald.setText("Emerald (V)");
        toggleEmerald.setToolTipText("Toggles emerald coolers in generated reactors");

        toggleCopper.setSelected(true);
        toggleCopper.setText("Copper (P)");
        toggleCopper.setToolTipText("Toggles copper coolers in generated reactors");

        toggleTin.setSelected(true);
        toggleTin.setText("Tin (T)");
        toggleTin.setToolTipText("Toggles tin coolers in generated reactors");

        toggleMagnesium.setSelected(true);
        toggleMagnesium.setText("Magnesium (N)");
        toggleMagnesium.setToolTipText("Toggles magnesium coolers in generated reactors");

        sizeX.setModel(new javax.swing.SpinnerNumberModel(3, 1, null, 1));
        sizeX.setToolTipText("");

        sizeY.setModel(new javax.swing.SpinnerNumberModel(3, 1, null, 1));
        sizeY.setToolTipText("");

        sizeZ.setModel(new javax.swing.SpinnerNumberModel(3, 1, null, 1));
        sizeZ.setToolTipText("");

        textAreaOutput.setColumns(32);
        textAreaOutput.setRows(5);
        textAreaOutput.setToolTipText("");
        textAreaOutput.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                textAreaOutputKeyTyped(evt);
            }
        });
        jScrollPane1.setViewportView(textAreaOutput);

        toggleAir.setText("Empty Space ( )");
        toggleAir.setToolTipText("Toggles empty space in generated reactors");

        boxFuel.setModel(Fuel.getComboBoxModel());
        boxFuel.setToolTipText("Choose what fuel reactors will be designed for");

        spinnerThreads.setModel(new javax.swing.SpinnerNumberModel(1, 1, 16, 1));
        spinnerThreads.setToolTipText("WARNING: Using many threads may melt your computer.");

        labelThreads.setText("Threads:");
        labelThreads.setToolTipText("WARNING: Using many threads may melt your computer.");

        buttonStart2.setText("Start");
        buttonStart2.setToolTipText("Starts or stops generating reactors");
        buttonStart2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonStart2ActionPerformed(evt);
            }
        });

        textAreaOutput2.setEditable(false);
        textAreaOutput2.setColumns(32);
        textAreaOutput2.setRows(5);
        textAreaOutput2.setToolTipText("");
        jScrollPane2.setViewportView(textAreaOutput2);

        spinnerMergeTime.setModel(new javax.swing.SpinnerNumberModel(2, 0, null, 1));
        spinnerMergeTime.setToolTipText("If no better reactors are found for this amount of time (in seconds), the worse reactor will be discarded, and a new one will be started");

        labelPriority1.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        labelPriority1.setText("First Priority");

        boxPriority1.setModel(Priority.getComboBoxModel());
        boxPriority1.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                boxPriority1ItemStateChanged(evt);
            }
        });

        labelPriority2.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        labelPriority2.setText("Second Priority");

        boxPriority2.setModel(Priority.getComboBoxModel());
        boxPriority2.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                boxPriority2ItemStateChanged(evt);
            }
        });

        boxPriority3.setModel(Priority.getComboBoxModel());
        boxPriority3.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                boxPriority3ItemStateChanged(evt);
            }
        });

        labelPriority3.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        labelPriority3.setText("Third Priority");

        labelMergeTime.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelMergeTime.setText("Merge Timeout (sec)");
        labelMergeTime.setToolTipText("If no better reactors are found for this amount of time (in seconds), the worse reactor will be discarded, and a new one will be started");

        spinnerChangeChance.setModel(new javax.swing.SpinnerNumberModel(Float.valueOf(10.0f), Float.valueOf(0.0f), Float.valueOf(100.0f), Float.valueOf(0.1f)));
        spinnerChangeChance.setToolTipText("In stage 2, in any new reactor generated, each part will have this% chance of being changed");

        labelChangeChance.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelChangeChance.setText("Change chance");
        labelChangeChance.setToolTipText("In stage 2, in any new reactor generated, each part will have this% chance of being changed");

        labelSize.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelSize.setText("Reactor Size");

        checkboxDrawReactors.setText("Draw reactors");
        checkboxDrawReactors.setToolTipText("");
        checkboxDrawReactors.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkboxDrawReactorsActionPerformed(evt);
            }
        });

        jPanel1.setLayout(new java.awt.GridLayout(1, 0));

        jPanel2.setLayout(new java.awt.GridLayout(1, 0));

        buttonImport.setText("Import Reactor");
        buttonImport.setToolTipText("Click this to import the reactor from the left box");
        buttonImport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonImportActionPerformed(evt);
            }
        });

        jButton1.setText("Take me to the future!");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(toggleCells)
                    .addComponent(toggleModerators)
                    .addComponent(toggleWater)
                    .addComponent(toggleRedstone)
                    .addComponent(labelCoolers, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(toggleQuartz)
                    .addComponent(toggleGold)
                    .addComponent(toggleGlowstone)
                    .addComponent(toggleLapis)
                    .addComponent(toggleDiamond)
                    .addComponent(toggleHelium)
                    .addComponent(toggleEnderium)
                    .addComponent(toggleCryotheum)
                    .addComponent(toggleIron)
                    .addComponent(toggleEmerald)
                    .addComponent(toggleCopper)
                    .addComponent(toggleTin)
                    .addComponent(toggleMagnesium)
                    .addComponent(toggleAir))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 288, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 288, Short.MAX_VALUE))
                    .addComponent(buttonStart2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(boxFuel, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(labelThreads)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(spinnerThreads, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(sizeX)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(sizeY)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(sizeZ))
                    .addComponent(labelStatus, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(labelSize, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(checkboxDrawReactors, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 133, Short.MAX_VALUE)
                            .addComponent(labelPriority1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(labelPriority2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(labelPriority3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(labelChangeChance, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(spinnerChangeChance, javax.swing.GroupLayout.Alignment.LEADING))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(spinnerMergeTime)
                            .addComponent(boxPriority1, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(boxPriority2, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(boxPriority3, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(labelMergeTime, javax.swing.GroupLayout.DEFAULT_SIZE, 121, Short.MAX_VALUE)
                            .addComponent(buttonImport, javax.swing.GroupLayout.DEFAULT_SIZE, 121, Short.MAX_VALUE)))
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(labelStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(spinnerThreads, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(labelThreads)
                            .addComponent(boxFuel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(labelSize)
                        .addGap(0, 0, 0)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(sizeX, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(sizeY, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(sizeZ, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(labelMergeTime)
                            .addComponent(labelChangeChance))
                        .addGap(0, 0, 0)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(spinnerMergeTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(spinnerChangeChance, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(labelPriority1)
                            .addComponent(boxPriority1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, 0)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(labelPriority2)
                            .addComponent(boxPriority2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, 0)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(boxPriority3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(labelPriority3))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(checkboxDrawReactors)
                            .addComponent(buttonImport))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(toggleCells)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(toggleModerators))
                            .addComponent(buttonStart2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(0, 0, 0)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(labelCoolers, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(toggleWater)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(toggleRedstone)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(toggleQuartz)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(toggleGold)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(toggleGlowstone)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(toggleLapis)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(toggleDiamond)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(toggleHelium)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(toggleEnderium)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(toggleCryotheum)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(toggleIron)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(toggleEmerald)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(toggleCopper)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(toggleTin)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(toggleMagnesium)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(toggleAir)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addComponent(jScrollPane1)
                            .addComponent(jScrollPane2))))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    private void buttonStart1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonStart1ActionPerformed
        if(buttonStart1.getText().equals("ABORT")||buttonStart1.getText().equals("Abort")){
            buttonStart1.setText("Start One");
            buttonStart2.setText("Start Two");
            buttonStart2.setEnabled(true);
            return;
        }
        MERGE_THRESHOLD = (int)spinnerMergeTime.getValue()*1_000_000_000l;
        refreshPriorities();
        buttonStart2.setEnabled(false);
        buttonStart1.setText("ABORT");
        buttonStart2.setText("ABORT");
        ArrayList<ReactorParts> available = getAvailableParts(new ArrayList<>());
        int X = (int) sizeX.getValue();
        int Y = (int) sizeY.getValue();
        int Z = (int) sizeZ.getValue();
        Fuel fuel = Fuel.fuels.get(boxFuel.getSelectedIndex());
        best = null;
        if(imported!=null){
            best = imported;
            imported = null;
            update1 = true;
        }
        processed = 0;
        startTime = System.nanoTime();
        lastTime = System.nanoTime();
        int threads = (int)spinnerThreads.getValue();
        float changeChance = (float)spinnerChangeChance.getValue()/100f;
        for(int i = 0; i<threads; i++){
            startGenerationThread(fuel, X, Y, Z, available, startTime, changeChance);
        }
        startStatusThread();
    }//GEN-LAST:event_buttonStart1ActionPerformed
    private void textAreaOutputKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_textAreaOutputKeyTyped
        int X = (int) sizeX.getValue();
        int Y = (int) sizeY.getValue();
        int Z = (int) sizeZ.getValue();
        Fuel fuel = Fuel.fuels.get(boxFuel.getSelectedIndex());
        Reactor reactor = Reactor.parse(fuel, X, Y, Z, textAreaOutput.getText());
        if(reactor!=null){
            textAreaOutput.setText(reactor.getConfiguration()+"\n"+reactor.power+" RF/t\n"+Math.round(reactor.heat)+" H/t\nEfficiency: "+Math.round(reactor.totalEfficiency*1000)/10d+"%");
        }
    }//GEN-LAST:event_textAreaOutputKeyTyped
    private void buttonStart2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonStart2ActionPerformed
        if(buttonStart2.getText().equals("ABORT")||buttonStart2.getText().equals("Abort")){
            buttonStart2.setText("Start");
            buttonStart1.setText("Start One");
            buttonStart1.setEnabled(true);
            return;
        }
        MERGE_THRESHOLD = (int)spinnerMergeTime.getValue()*1_000_000_000l;
        refreshPriorities();
        buttonStart1.setEnabled(false);
        buttonStart2.setText("ABORT");
        buttonStart1.setText("ABORT");
        ArrayList<ReactorParts> available = getAvailableParts(new ArrayList<>());
        int X = (int) sizeX.getValue();
        int Y = (int) sizeY.getValue();
        int Z = (int) sizeZ.getValue();
        Fuel fuel = Fuel.fuels.get(boxFuel.getSelectedIndex());
        best = best2 = null;
        if(imported!=null){
            best = imported;
            imported = null;
            update1 = true;
        }
        processed = 0;
        startTime = System.nanoTime();
        lastTime = System.nanoTime();
        int threads = (int)spinnerThreads.getValue();
        float changeChance = (float)spinnerChangeChance.getValue()/100f;
        for(int i = 0; i<threads; i++){
            startGenerationThread(fuel, X, Y, Z, available, startTime, changeChance);
        }
        for(int i = 0; i<threads; i++){
            startGenerationThread(fuel, X, Y, Z, available, startTime, changeChance, true);
        }
        Thread twosies = new Thread(() -> {
            while(buttonStart1.getText().equalsIgnoreCase("abort")){
                try {
                    Thread.sleep(1000);
                } catch (InterruptedException ex) {
                    Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
                }
                if(System.nanoTime()-lastTime>MERGE_THRESHOLD){
                    boolean toUpdate = false;
                    System.out.println("Merging...");
                    stopSecondaries = true;
                    best.color = best2.color = Color.red;
                    if(best2.isBetter(best)){
                        toUpdate = true;
                        best2.color = Color.green;
                    }else{
                        best.color = Color.green;
                    }
                    repaint();
                    try {
                        Thread.sleep(100);
                    } catch (InterruptedException ex) {
                        Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    best.color = best2.color = null;
                    repaint();
                    if(best2.isBetter(best)){
                        best = best2;
                    }
                    best2 = null;
                    buttonStart1.setText("ABORT");
                    for(int i = 0; i<threads; i++){
                        startGenerationThread(fuel, X, Y, Z, available, startTime, changeChance, true);
                    }
                    System.out.println("Merged!");
                    if(toUpdate)update1 = true;
                }
            }
        }, "Reactor merging thread");
        twosies.setDaemon(true);
        twosies.start();
        startStatusThread();
    }//GEN-LAST:event_buttonStart2ActionPerformed
    private void boxPriority1ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_boxPriority1ItemStateChanged
        refreshPriorities();
    }//GEN-LAST:event_boxPriority1ItemStateChanged
    private void boxPriority2ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_boxPriority2ItemStateChanged
        refreshPriorities();
    }//GEN-LAST:event_boxPriority2ItemStateChanged
    private void boxPriority3ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_boxPriority3ItemStateChanged
        refreshPriorities();
    }//GEN-LAST:event_boxPriority3ItemStateChanged
    private void checkboxDrawReactorsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkboxDrawReactorsActionPerformed
        if(!checkboxDrawReactors.isSelected()){
            jPanel1.removeAll();
            jPanel2.removeAll();
            repaint();
        }
    }//GEN-LAST:event_checkboxDrawReactorsActionPerformed
    private void buttonImportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonImportActionPerformed
        int X = (int) sizeX.getValue();
        int Y = (int) sizeY.getValue();
        int Z = (int) sizeZ.getValue();
        Fuel fuel = Fuel.fuels.get(boxFuel.getSelectedIndex());
        Reactor reactor = Reactor.parse(fuel, X, Y, Z, textAreaOutput.getText());
        if(reactor!=null){
            textAreaOutput.setText(reactor.getConfiguration()+"\n"+reactor.power+" RF/t\n"+Math.round(reactor.heat)+" H/t\nEfficiency: "+Math.round(reactor.totalEfficiency*1000)/10d+"%");
            updateOutput(1, reactor);
            textAreaOutput2.setText("Reactor imported!");
            imported = reactor;
        }else{
            ArrayList<ReactorParts> available = getAvailableParts(new ArrayList<>());
            Random rand = new Random();
            reactor = new Reactor(fuel,X,Y,Z){
                @Override
                protected ReactorParts build(int X, int Y, int Z) {
                    return ReactorParts.CELL;
                }
            };
            textAreaOutput2.setText("To import a reactor, paste or type\n"
                                 + " in the configuration into text\n"
                                 + " field on the left.\n"
                                 + "The size of the reactor must match\n"
                                 + "the size setting.\n"
                                 + "For example:\n\n"+reactor.getConfiguration()+"\n\nWARNING: any invalid parts will be ignored.");
        }
    }//GEN-LAST:event_buttonImportActionPerformed
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        dispose();
        pre_overhaul.Main.main(new String[0]);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        buttonStart2.setText("Start");
    }//GEN-LAST:event_formWindowClosing
    private Thread startGenerationThread(Fuel fuel, int X, int Y, int Z, ArrayList<ReactorParts> available, long startTime, float changeChance){
        return startGenerationThread(fuel, X, Y, Z, available, startTime, changeChance, false); 
    }
    private Thread startGenerationThread(Fuel fuel, int X, int Y, int Z, ArrayList<ReactorParts> available, long startTime, float changeChance, boolean secondary){
        if(secondary)stopSecondaries = false;
        Thread gen = new Thread(() -> {
            Random rand = new Random();
            //<editor-fold defaultstate="collapsed" desc="Generate initial reactor">
            while(buttonStart1.getText().equals("ABORT")){
                if(secondary&&stopSecondaries)return;
                Reactor reactor = new Reactor(fuel,X,Y,Z){
                    @Override
                    protected ReactorParts build(int X, int Y, int Z) {
                        return available.get(rand.nextInt(available.size()));
                    }
                };
                Reactor oldBest;
                if(secondary){
                    oldBest = best2;
                    if(reactor.isBetter(best2)){
                        best2 = reactor;
                    }
                }else{
                    oldBest = best;
                    if(reactor.isBetter(best)){
                        best = reactor;
                    }
                }
                processed++;
                //<editor-fold defaultstate="collapsed" desc="finishing">
                Reactor theBest = secondary?best2:best;
                if(theBest!=oldBest){
                    lastTime = System.nanoTime();
                    long timeDiff = System.nanoTime()-startTime;
                    double pernano = processed/(double)timeDiff;
                    double permilli = pernano*1_000_000;
                    double persec = permilli*1000;
                    String time = toTime(timeDiff);
                    if(secondary){
                        updateOutput(2,time,processed,persec,theBest);
                    }else{
                        updateOutput(1,time,processed,persec,theBest);
                    }
                }else{
                    long lastDiff = System.nanoTime()-lastTime;
                    if(lastDiff>0){
                        buttonStart1.setText("Abort");
                        buttonStart2.setText("Abort");
                    }
                    //Yes, I know the loop is pointless. This is from when there was still a "Stage 1" and "Stage 2"
                }
//</editor-fold>
            }
//</editor-fold>
            //<editor-fold defaultstate="collapsed" desc="Improve Reactor">
            while(buttonStart1.getText().equalsIgnoreCase("Abort")){
                if(secondary&&stopSecondaries)return;
                Reactor reactor = new Reactor(fuel,X,Y,Z){
                    @Override
                    protected ReactorParts build(int X, int Y, int Z) {
                        if(rand.nextFloat()<changeChance)return available.get(rand.nextInt(available.size()));
                        try{
                            return secondary?best2.parts[X][Y][Z]:best.parts[X][Y][Z];
                        }catch(NullPointerException ex){
                            return available.get(rand.nextInt(available.size()));
                        }
                    }
                };
                Reactor oldBest;
                if(secondary){
                    oldBest = best2;
                    if(reactor.isBetter(best2)){
                        best2 = reactor;
                    }
                }else{
                    oldBest = best;
                    if(reactor.isBetter(best)){
                        best = reactor;
                    }
                }
                processed++;
                //<editor-fold defaultstate="collapsed" desc="finishing">
                Reactor theBest = secondary?best2:best;
                if(theBest!=oldBest||(!secondary&&update1)){
                    update1 = false;
                    lastTime = System.nanoTime();
                    long timeDiff = System.nanoTime()-startTime;
                    double pernano = processed/(double)timeDiff;
                    double permilli = pernano*1_000_000;
                    double persec = permilli*1000;
                    String time = "?";
                    if(timeDiff<1_000_000){
                        time = timeDiff+"ns";
                    }else{
                        timeDiff/=1_000_000;
                        if(timeDiff<1000){
                            time = timeDiff+"ms";
                        }else{
                            timeDiff/=1000;
                            if(timeDiff<60){
                                time = timeDiff+"s";
                            }else{
                                timeDiff/=60;
                                if(timeDiff<60){
                                    time = timeDiff+"m";
                                }else{
                                    timeDiff/=60;
                                    if(timeDiff<24){
                                        time = timeDiff+"h";
                                    }else{
                                        timeDiff/=24;
                                        time = timeDiff+"d";
                                    }
                                }
                            }
                        }
                    }
                    if(secondary){
                        updateOutput(2, time, processed, persec, theBest);
                    }else{
                        updateOutput(1, time, processed, persec, theBest);
                    }
                }
//</editor-fold>
            }
//</editor-fold>
        }, (secondary?"Secondary ":"")+"Generation Thread "+(secondary?id2:id));
        if(secondary)id2++;
        else id++;
        gen.setDaemon(true);
        gen.start();
        return gen;
    }
    private Thread startStatusThread(){
        Thread statusThread = new Thread(() -> {
            while(buttonStart1.getText().equalsIgnoreCase("abort")){
                try {
                    Thread.sleep(100);
                } catch (InterruptedException ex) {
                    Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
                }
                String status = "Total time: "+toTime(System.nanoTime()-startTime)+" | Time since last update: "+toTime(System.nanoTime()-lastTime);
                labelStatus.setText(status);
            }
        }, "Reactor status thread");
        statusThread.setDaemon(true);
        statusThread.start();
        return statusThread;
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if (info.getName().contains("Nimbus")) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if (info.getName().contains("Windows")) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Main().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> boxFuel;
    private javax.swing.JComboBox<String> boxPriority1;
    private javax.swing.JComboBox<String> boxPriority2;
    private javax.swing.JComboBox<String> boxPriority3;
    private javax.swing.JButton buttonImport;
    private javax.swing.JButton buttonStart1;
    private javax.swing.JButton buttonStart2;
    private javax.swing.JCheckBox checkboxDrawReactors;
    private javax.swing.JButton jButton1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel labelChangeChance;
    private javax.swing.JLabel labelCoolers;
    private javax.swing.JLabel labelMergeTime;
    private javax.swing.JLabel labelPriority1;
    private javax.swing.JLabel labelPriority2;
    private javax.swing.JLabel labelPriority3;
    private javax.swing.JLabel labelSize;
    private javax.swing.JLabel labelStatus;
    private javax.swing.JLabel labelThreads;
    private javax.swing.JSpinner sizeX;
    private javax.swing.JSpinner sizeY;
    private javax.swing.JSpinner sizeZ;
    private javax.swing.JSpinner spinnerChangeChance;
    private javax.swing.JSpinner spinnerMergeTime;
    private javax.swing.JSpinner spinnerThreads;
    private javax.swing.JTextArea textAreaOutput;
    private javax.swing.JTextArea textAreaOutput2;
    private javax.swing.JCheckBox toggleAir;
    private javax.swing.JCheckBox toggleCells;
    private javax.swing.JCheckBox toggleCopper;
    private javax.swing.JCheckBox toggleCryotheum;
    private javax.swing.JCheckBox toggleDiamond;
    private javax.swing.JCheckBox toggleEmerald;
    private javax.swing.JCheckBox toggleEnderium;
    private javax.swing.JCheckBox toggleGlowstone;
    private javax.swing.JCheckBox toggleGold;
    private javax.swing.JCheckBox toggleHelium;
    private javax.swing.JCheckBox toggleIron;
    private javax.swing.JCheckBox toggleLapis;
    private javax.swing.JCheckBox toggleMagnesium;
    private javax.swing.JCheckBox toggleModerators;
    private javax.swing.JCheckBox toggleQuartz;
    private javax.swing.JCheckBox toggleRedstone;
    private javax.swing.JCheckBox toggleTin;
    private javax.swing.JCheckBox toggleWater;
    // End of variables declaration//GEN-END:variables
    private HugeLong fact(int val) {
        HugeLong fact = HugeLong.parse(1);
        for(int i = 2; i<=val; i++){
            fact = HugeLong.multiply(fact, HugeLong.parse(i));
        }
        return fact;
    }
    private ArrayList<ReactorParts> getAvailableParts(ArrayList<ReactorParts> list) {
        if(toggleCells.isSelected())list.add(ReactorParts.CELL);
        if(toggleModerators.isSelected())list.add(ReactorParts.MODERATOR);
        if(toggleWater.isSelected())list.add(ReactorParts.WATER);
        if(toggleRedstone.isSelected())list.add(ReactorParts.REDSTONE);
        if(toggleQuartz.isSelected())list.add(ReactorParts.QUARTZ);
        if(toggleGold.isSelected())list.add(ReactorParts.GOLD);
        if(toggleGlowstone.isSelected())list.add(ReactorParts.GLOWSTONE);
        if(toggleLapis.isSelected())list.add(ReactorParts.LAPIS);
        if(toggleDiamond.isSelected())list.add(ReactorParts.DIAMOND);
        if(toggleHelium.isSelected())list.add(ReactorParts.HELIUM);
        if(toggleEnderium.isSelected())list.add(ReactorParts.ENDERIUM);
        if(toggleCryotheum.isSelected())list.add(ReactorParts.CRYOTHEUM);
        if(toggleIron.isSelected())list.add(ReactorParts.IRON);
        if(toggleEmerald.isSelected())list.add(ReactorParts.EMERALD);
        if(toggleCopper.isSelected())list.add(ReactorParts.COPPER);
        if(toggleTin.isSelected())list.add(ReactorParts.TIN);
        if(toggleMagnesium.isSelected())list.add(ReactorParts.MAGNESIUM);
        if(toggleAir.isSelected())list.add(ReactorParts.AIR);
        return list;
    }
    private String toTime(long timeDiff) {
        String time;
        if(timeDiff<1_000_000){
            time = timeDiff+"ns";
        }else{
            timeDiff/=1_000_000;
            if(timeDiff<1000){
                time = timeDiff+"ms";
            }else{
                timeDiff/=1000;
                if(timeDiff<60){
                    time = timeDiff+"s";
                }else{
                    timeDiff/=60;
                    if(timeDiff<60){
                        time = timeDiff+"m";
                    }else{
                        timeDiff/=60;
                        if(timeDiff<24){
                            time = timeDiff+"h";
                        }else{
                            timeDiff/=24;
                            time = timeDiff+"d";
                        }
                    }
                }
            }
        }
        return time;
    }
    private void refreshPriorities() {
        if(buttonStart1.getText().equalsIgnoreCase("abort"))return;
        Reactor.priorities.clear();
        Reactor.priorities.add(Priority.values()[boxPriority1.getSelectedIndex()]);
        Reactor.priorities.add(Priority.values()[boxPriority2.getSelectedIndex()]);
        Reactor.priorities.add(Priority.values()[boxPriority3.getSelectedIndex()]);
        System.out.println("Refreshed");
    }
    private void updateOutput(int textArea, String time, long processed, double persec, Reactor reactor) {
        String text = "Time: "+time+"\nReactors processed: "+processed+"\nReactors per second: "+Math.round(persec*1000)/1000d+"/s\n"+reactor.getDetails();
        if(textArea==1)textAreaOutput.setText(text);
        if(textArea==2)textAreaOutput2.setText(text);
        updateOutput(textArea, reactor);
    }
    private void updateOutput(int side, Reactor reactor){
        if(checkboxDrawReactors.isSelected()){
            if(side==1){
                synchronized(jPanel1){
                    jPanel1.removeAll();
                    jPanel1.add(new ReactorPanel(reactor));
                }
            }
            if(side==2){
                synchronized(jPanel2){
                    jPanel2.removeAll();
                    jPanel2.add(new ReactorPanel(reactor));
                }
            }
        }
    }
}